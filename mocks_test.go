// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/WheeskyJack/batchgo (interfaces: Slicer)

// Package batchgo_test is a generated GoMock package.
package batchgo_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSlicer is a mock of Slicer interface.
type MockSlicer struct {
	ctrl     *gomock.Controller
	recorder *MockSlicerMockRecorder
}

// MockSlicerMockRecorder is the mock recorder for MockSlicer.
type MockSlicerMockRecorder struct {
	mock *MockSlicer
}

// NewMockSlicer creates a new mock instance.
func NewMockSlicer(ctrl *gomock.Controller) *MockSlicer {
	mock := &MockSlicer{ctrl: ctrl}
	mock.recorder = &MockSlicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlicer) EXPECT() *MockSlicerMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockSlicer) Append(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Append", arg0)
}

// Append indicates an expected call of Append.
func (mr *MockSlicerMockRecorder) Append(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockSlicer)(nil).Append), arg0)
}

// Export mocks base method.
func (m *MockSlicer) Export() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export")
	ret0, _ := ret[0].(error)
	return ret0
}

// Export indicates an expected call of Export.
func (mr *MockSlicerMockRecorder) Export() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockSlicer)(nil).Export))
}

// Len mocks base method.
func (m *MockSlicer) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockSlicerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockSlicer)(nil).Len))
}

// OnFailure mocks base method.
func (m *MockSlicer) OnFailure(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFailure", arg0)
}

// OnFailure indicates an expected call of OnFailure.
func (mr *MockSlicerMockRecorder) OnFailure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFailure", reflect.TypeOf((*MockSlicer)(nil).OnFailure), arg0)
}
